#include "config/pins.hpp"
#include "pico/binary_info.h"  // IWYU pragma: keep
#include "sdk/i2c.hpp"
#include "sdk/spi.hpp"

namespace nevermore {

namespace {

constexpr GPIO first_pin(Pins::BusI2C::Kind bus_kind, I2C_Pin kind) {
    for (auto const& bus : PINS_DEFAULT.i2c) {
        if (bus.kind == bus_kind) {
            switch (kind) {
            case I2C_Pin::SCL: return bus.clock;
            case I2C_Pin::SDA: return bus.data;
            }
        }
    }

    return {};
}

constexpr GPIO first_pin(Pins::BusSPI::Kind bus_kind, SPI_Pin kind) {
    for (auto const& bus : PINS_DEFAULT.spi) {
        if (bus.kind == bus_kind) {
            switch (kind) {
            case SPI_Pin::CLOCK: return bus.clock;
            case SPI_Pin::SEND: return bus.send;
            case SPI_Pin::RECV: return bus.recv;
            case SPI_Pin::SELECT: return {}; // not used
            }
        }
    }

    return {};
}

}  // namespace

// Following fields can be specified via CMake and handled by the standard pico linker:
//  Name, Description, URL, Version, Build Attribute (CMake build type)

// We do this manually for clarity and to ensure some fields are minimally stale.
// (CMake module for git-description only forces a re-configure.)
bi_decl(bi_program_description("Nevermore Controller"));
bi_decl(bi_program_url("https://github.com/SanaaHamel/nevermore-controller"));
bi_decl(bi_program_version_string("@GIT_DESCRIPTION@"));
bi_decl(bi_program_build_date_string("@BUILD_TIMESTAMP@"));

// clang-format off
bi_decl(bi_2pins_with_names(
    0, "UART - TX",
    1, "UART - RX"));
static_assert(nevermore::PINS_RESERVED_UART == decltype(nevermore::PINS_RESERVED_UART){0, 1});

bi_decl(bi_4pins_with_names(
    first_pin(Pins::BusI2C::Kind::intake  , I2C_Pin::SDA), "Intake I2C SDA",
    first_pin(Pins::BusI2C::Kind::intake  , I2C_Pin::SCL), "Intake I2C SCL",
    first_pin(Pins::BusI2C::Kind::exhaust , I2C_Pin::SDA), "Exhaust I2C SDA",
    first_pin(Pins::BusI2C::Kind::exhaust , I2C_Pin::SCL), "Exhaust I2C SCL"));

bi_decl(bi_2pins_with_names(
    PINS_DEFAULT.fan_pwm[0].gpio        , "Fan PWM",
    PINS_DEFAULT.fan_tachometer[0].gpio , "Fan Tachometer"));

bi_decl(bi_1pin_with_name(
    PINS_DEFAULT.neopixel_data[0].gpio  , "NeoPixel Data"));

bi_decl(bi_3pins_with_names(
    first_pin(Pins::BusSPI::Kind::display , SPI_Pin::CLOCK), "Display - SPI CLOCK",
    first_pin(Pins::BusSPI::Kind::display , SPI_Pin::SEND ), "Display - SPI SEND",
    first_pin(Pins::BusSPI::Kind::display , SPI_Pin::RECV ), "Display - SPI RECV"));

bi_decl(bi_3pins_with_names(
    PINS_DEFAULT.display_command        , "Display - Command",
    PINS_DEFAULT.display_reset          , "Display - Reset",
    PINS_DEFAULT.display_brightness_pwm , "Display - Brightness"));

bi_decl(bi_2pins_with_names(
    PINS_DEFAULT.touch_interrupt, "Touch Interrupt",
    PINS_DEFAULT.touch_reset    , "Touch Reset"));
// clang-format on

}  // namespace nevermore
